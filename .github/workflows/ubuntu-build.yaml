name: ubuntu build
run-name: build runner on ubuntu 🚀

# 触发CI条件
on:
  push:
    # 当下面文件发生变化时, 触发CI
    paths:
      - 'setup.py'
      - 'packages.json'
      - '.github/workflows/ubuntu-build.yaml'

  pull_request:
    # 当下面分支PR时, 触发CI
    branches:
      - main
  
jobs:
  build-amd-ubuntu:
    # 并行
    strategy:
      matrix:
        os: ["16.04", "18.04", "20.04", "22.04"]

    # github actions docker image
    runs-on: ubuntu-latest
    # docker in docker 因为Github提供的镜像不满足需求, 所以需要拉取dockerhub上的镜像
    container:
      # dockerhub镜像
      image: docker://ubuntu:${{ matrix.os }}
      # 挂载
      options: --volume ${{ github.workspace }}:/workspace/${{ github.repository }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      # 安装依赖
      - name: Install
        # 非交互式
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          apt update
          apt install -y pkg-config wget unzip python3-dev git cmake g++

      # 编译
      - name: Build
        run: |
          bash -c "cd /workspace/${{ github.repository }} && python3 setup.py && source install/setup.bash"

      - name: Test
        run: |
          bash -c "cd /workspace/${{ github.repository }} && source install/setup.bash && source install1/setup.1/env/setup.bash && source install2/setup.2/env/setup.bash"

  build-arm-ubuntu:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu18.04
          - arch: aarch64
            distro: ubuntu20.04

    steps:
      - uses: actions/checkout@v3
      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: runcmd
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          install: |
            apt update
            apt install -y lsb-release

          run: |
            echo "-----------------------"
            uname -a
            lsb_release -a
            echo "-----------------------"
            ls # 当前仓库根目录 .git

